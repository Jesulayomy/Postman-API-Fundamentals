{
	"info": {
		"_postman_id": "1a805080-d23e-4729-8793-def1fe8ca0b6",
		"name": "Valentino Artisan Coffee House API",
		"description": "An API for managing orders and products at a coffee place named Valentino's Artisan Coffee House.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28586598"
	},
	"item": [
		{
			"name": "status",
			"item": [
				{
					"name": "Get API status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Headers powered by express\", () => {",
									"    pm.expect(pm.response.headers.get('x-powered-by')).to.eql('Express');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Retrieve the current status of the API"
					},
					"response": [
						{
							"name": "API status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			],
			"description": "Get the status of the API."
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?category=pastry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"description": "The page number to fetch",
									"disabled": true
								},
								{
									"key": "category",
									"value": "pastry"
								},
								{
									"key": "limit",
									"value": "3",
									"disabled": true
								}
							]
						},
						"description": "Retrieve a paginated list of products, 10 products per page"
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Status is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"    const response = pm.response.json();",
									"    console.log(response['product-description']);",
									"});",
									"",
									"pm.test(\"Product details\", () => {",
									"    pm.expect(response.id).to.eql(",
									"        parseInt(pm.collectionVariables.get('productId'))",
									"    );",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response.name).to.be.a('string');",
									"    pm.expect(response.isAvailable).to.be.true;",
									"});",
									"",
									"pm.test(\"Schema Body\", () => {",
									"    const schema = {",
									"        type: 'object',",
									"        properties: {",
									"            id: {",
									"                type: 'number'",
									"            },",
									"            category: {",
									"                type: 'string'",
									"            },",
									"            name: {",
									"                type: 'string'",
									"            },",
									"            isAvailable: {",
									"                type: 'boolean'",
									"            },",
									"            'product-description': {",
									"                type: 'string'",
									"            },",
									"            additionalText: {",
									"                type: 'string'",
									"            }",
									"        },",
									"        required: ['id', 'category', 'name', 'isAvailable', 'product-description', 'additionalText'],",
									"        additionalProperties: false",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						},
						"description": "Retrieve a single product by specifying the product ID."
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3001,\n    \"category\": \"pastry\",\n    \"name\": \"Croissant\",\n    \"isAvailable\": true,\n    \"product-description\": \"A flaky, buttery pastry made by folding layers of dough and butter, resulting in a deliciously light and airy treat.\",\n    \"additionalText\": \"Contains gluten, milk\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "Register a new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(",
									"    'apiKey',",
									"    pm.response.json().token",
									")",
									"",
									"pm.test(\"Status is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Register a new API client by providing an email address"
					},
					"response": [
						{
							"name": "Client registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"value\": \"reference #/components/schemas/ApiClient not found in the OpenAPI spec\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"pm.collectionVariables.set('orderId', response.id);",
									"",
									"pm.test(\"Status is 201\", () => {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Customer Name\", () => {",
									"    pm.expect(response.customerName, \"Name\").to.eql(pm.collectionVariables.get('customerName'));",
									"});",
									"",
									"pm.test(\"Order ID Format\", () => {",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9,10}$/);",
									"});",
									"",
									"pm.test(\"JSON Schema is valid\", () => {",
									"    const schema = {",
									"        type: 'object',",
									"        properties: {",
									"            id: {",
									"                type: 'string',",
									"                pattern: '^[A-Z0-9]{9,10}$'",
									"            },",
									"            clientId: {",
									"                type: 'string'",
									"            },",
									"            created: {",
									"                type: 'string',",
									"                format: 'date-time'",
									"            },",
									"            customerName: {",
									"                type: 'string'",
									"            },",
									"            products: {",
									"                type: 'array',",
									"                items: {",
									"                    type: 'object',",
									"                    properties: {",
									"                        id: {",
									"                            type: 'integer'",
									"                        },",
									"                        quantity: {",
									"                            type: 'integer'",
									"                        }",
									"                    },",
									"                    required: ['id', 'quantity'],",
									"                    additionalProperties: false",
									"                }",
									"            }",
									"        },",
									"        required: [\"id\", \"clientId\", \"created\", \"customerName\", \"products\"],",
									"        additionalProperties: false,",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(",
									"    'customerName',",
									"    pm.variables.replaceIn('{{$randomFullName}}')",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": {{productId}},\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Place a new order by providing customer details and ordered products"
					},
					"response": [
						{
							"name": "Create a new order",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": {{productId}},\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1720530299&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=C2vVDOzrphP5HwI9toWIk%2FoHhwTnms1dbsExYBGo0mw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1720530299&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=C2vVDOzrphP5HwI9toWIk%2FoHhwTnms1dbsExYBGo0mw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "172"
								},
								{
									"key": "Etag",
									"value": "W/\"ac-iuVA39jPfOO/Vf22cgdPA/9g3n8\""
								},
								{
									"key": "Date",
									"value": "Tue, 09 Jul 2024 13:04:59 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"DBL2KPQMJ\",\n    \"clientId\": \"XdZamgNqF\",\n    \"created\": \"2024-07-09T13:04:59.889Z\",\n    \"customerName\": \"Leslie Jacobi\",\n    \"products\": [\n        {\n            \"id\": 3001,\n            \"quantity\": 1\n        },\n        {\n            \"id\": 2002,\n            \"quantity\": 3\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Status is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response Format is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Order Id', () => {",
									"    pm.expect(response).has.property('id');",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9,10}$/);",
									"});",
									"",
									"pm.test('Order Products', () => {",
									"    pm.expect(response).has.property('products');",
									"    pm.expect(response.products).is.a('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "The requested order",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{apiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "x-api-key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.glitch.me",
			"disabled": true
		},
		{
			"key": "apiKey",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.herokuapp.com",
			"type": "string"
		},
		{
			"key": "productId",
			"value": "3001"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "customerName",
			"value": ""
		}
	]
}